!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AllocateFreeBlock	./data_file.cc	/^int DataFile::AllocateFreeBlock() {$/;"	f	language:C++	class:DataFile	signature:()
AllocateFreeBlock	./data_file.h	/^  int AllocateFreeBlock();$/;"	p	language:C++	class:DataFile	access:public	signature:()
BTreeIndexFile	./btree_index_file.cc	/^BTreeIndexFile::BTreeIndexFile(const std::string& file_name) :$/;"	f	language:C++	class:BTreeIndexFile	signature:(const std::string& file_name)
BTreeIndexFile	./btree_index_file.h	/^  BTreeIndexFile(const std::string& file_name);$/;"	p	language:C++	class:BTreeIndexFile	access:public	signature:(const std::string& file_name)
BTreeIndexFile	./btree_index_file.h	/^class BTreeIndexFile : public IndexFile {$/;"	c	language:C++	inherits:IndexFile
BTreeIndexFile::BTreeIndexFile	./btree_index_file.cc	/^BTreeIndexFile::BTreeIndexFile(const std::string& file_name) :$/;"	f	language:C++	class:BTreeIndexFile	signature:(const std::string& file_name)
BTreeIndexFile::BTreeIndexFile	./btree_index_file.h	/^  BTreeIndexFile(const std::string& file_name);$/;"	p	language:C++	class:BTreeIndexFile	access:public	signature:(const std::string& file_name)
BTreeIndexFile::Close	./btree_index_file.cc	/^Status BTreeIndexFile::Close() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
BTreeIndexFile::DeleteIndex	./btree_index_file.cc	/^Status BTreeIndexFile::DeleteIndex(uint64_t key) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(uint64_t key)
BTreeIndexFile::GetIndex	./btree_index_file.cc	/^Status BTreeIndexFile::GetIndex(uint64_t key, IndexRecord* index) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(uint64_t key, IndexRecord* index)
BTreeIndexFile::Open	./btree_index_file.cc	/^Status BTreeIndexFile::Open() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
BTreeIndexFile::OpenBtree	./btree_index_file.cc	/^Status BTreeIndexFile::OpenBtree() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
BTreeIndexFile::OpenBtree	./btree_index_file.h	/^  Status OpenBtree();$/;"	p	language:C++	class:BTreeIndexFile	access:private	signature:()
BTreeIndexFile::PutIndex	./btree_index_file.cc	/^Status BTreeIndexFile::PutIndex(const IndexRecord& index) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(const IndexRecord& index)
BTreeIndexFile::ReadBtreeInfo	./btree_index_file.cc	/^Status BTreeIndexFile::ReadBtreeInfo(int index_fd, int mode) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(int index_fd, int mode)
BTreeIndexFile::ReadBtreeInfo	./btree_index_file.h	/^  Status ReadBtreeInfo(int index_fd, int mode);$/;"	p	language:C++	class:BTreeIndexFile	access:private	signature:(int index_fd, int mode)
BTreeIndexFile::Sync	./btree_index_file.cc	/^Status BTreeIndexFile::Sync() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
BTreeIndexFile::btree_	./btree_index_file.h	/^  struct stp_btree_info* btree_;$/;"	m	language:C++	class:BTreeIndexFile	typeref:struct:BTreeIndexFile::stp_btree_info	access:private
BTreeIndexFile::~BTreeIndexFile	./btree_index_file.cc	/^BTreeIndexFile::~BTreeIndexFile() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
BTreeIndexFile::~BTreeIndexFile	./btree_index_file.h	/^  ~BTreeIndexFile();$/;"	p	language:C++	class:BTreeIndexFile	access:public	signature:()
BlockDb	./block_db.cc	/^BlockDb::BlockDb() {$/;"	f	language:C++	class:BlockDb	signature:()
BlockDb	./block_db.h	/^  BlockDb();$/;"	p	language:C++	class:BlockDb	access:public	signature:()
BlockDb	./block_db.h	/^class BlockDb : public Db {$/;"	c	language:C++	inherits:Db
BlockDb::BlockDb	./block_db.cc	/^BlockDb::BlockDb() {$/;"	f	language:C++	class:BlockDb	signature:()
BlockDb::BlockDb	./block_db.h	/^  BlockDb();$/;"	p	language:C++	class:BlockDb	access:public	signature:()
BlockDb::Close	./block_db.cc	/^Status BlockDb::Close() {$/;"	f	language:C++	class:BlockDb	signature:()
BlockDb::Close	./block_db.h	/^  virtual Status Close();$/;"	p	language:C++	class:BlockDb	access:public	signature:()
BlockDb::Delete	./block_db.cc	/^Status BlockDb::Delete(const std::string& key) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key)
BlockDb::Delete	./block_db.h	/^  virtual Status Delete(const std::string& key);$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& key)
BlockDb::Get	./block_db.cc	/^Status BlockDb::Get(const std::string& key, std::string* value) const {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key, std::string* value) const
BlockDb::Get	./block_db.h	/^  virtual Status Get(const std::string& key, std::string* value) const;$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& key, std::string* value) const
BlockDb::Insert	./block_db.cc	/^Status BlockDb::Insert(const std::string& key, const std::string& value) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key, const std::string& value)
BlockDb::Insert	./block_db.h	/^  Status Insert(const std::string& key, const std::string& value);$/;"	p	language:C++	class:BlockDb	access:private	signature:(const std::string& key, const std::string& value)
BlockDb::Open	./block_db.cc	/^Status BlockDb::Open(const std::string& db_path) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& db_path)
BlockDb::Open	./block_db.h	/^  virtual Status Open(const std::string& db_path);$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& db_path)
BlockDb::Put	./block_db.cc	/^Status BlockDb::Put(const std::string& key, const std::string& value) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key, const std::string& value)
BlockDb::Put	./block_db.h	/^  virtual Status Put(const std::string& key, const std::string& value);$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& key, const std::string& value)
BlockDb::Update	./block_db.cc	/^Status BlockDb::Update(uint64_t offset, const std::string& key,$/;"	f	language:C++	class:BlockDb	signature:(uint64_t offset, const std::string& key, const std::string &value)
BlockDb::Update	./block_db.h	/^  Status Update(uint64_t offset, const std::string& key, std::string& value);$/;"	p	language:C++	class:BlockDb	access:private	signature:(uint64_t offset, const std::string& key, std::string& value)
BlockDb::data_file_	./block_db.h	/^  DataFile* data_file_;$/;"	m	language:C++	class:BlockDb	access:private
BlockDb::db_path_	./block_db.h	/^  std::string db_path_;$/;"	m	language:C++	class:BlockDb	access:private
BlockDb::index_file_	./block_db.h	/^  IndexFile* index_file_;$/;"	m	language:C++	class:BlockDb	access:private
BlockDb::~BlockDb	./block_db.h	/^  ~BlockDb();$/;"	p	language:C++	class:BlockDb	access:public	signature:()
Clear	./slice.h	/^  void Clear() { data_ = ""; size_ = 0; }$/;"	f	language:C++	class:Slice	access:public	signature:()
Close	./block_db.cc	/^Status BlockDb::Close() {$/;"	f	language:C++	class:BlockDb	signature:()
Close	./block_db.h	/^  virtual Status Close();$/;"	p	language:C++	class:BlockDb	access:public	signature:()
Close	./btree_index_file.cc	/^Status BTreeIndexFile::Close() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
Close	./data_file.cc	/^Status DataFile::Close() {$/;"	f	language:C++	class:DataFile	signature:()
Close	./data_file.h	/^  Status Close();$/;"	p	language:C++	class:DataFile	access:public	signature:()
Close	./db.h	/^  virtual Status Close();$/;"	p	language:C++	class:Db	access:public	signature:()
Close	./index_file.h	/^  Status Close();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
Close	./map_index_file.cc	/^Status MapIndexFile::Close() {$/;"	f	language:C++	class:MapIndexFile	signature:()
Close	./map_index_file.h	/^  Status Close();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
Code	./status.h	/^  enum Code {$/;"	g	language:C++	class:Status	access:private
CreateDataFile	./data_file.cc	/^Status DataFile::CreateDataFile() {$/;"	f	language:C++	class:DataFile	signature:()
CreateDataFile	./data_file.h	/^  Status CreateDataFile();$/;"	p	language:C++	class:DataFile	access:private	signature:()
CreateIndexFile	./map_index_file.cc	/^Status MapIndexFile::CreateIndexFile() {$/;"	f	language:C++	class:MapIndexFile	signature:()
CreateIndexFile	./map_index_file.h	/^  Status CreateIndexFile();$/;"	p	language:C++	class:MapIndexFile	access:private	signature:()
DataBlock	./data_format.h	/^struct DataBlock {$/;"	s	language:C++
DataBlock::items	./data_format.h	/^  uint16_t items;$/;"	m	language:C++	struct:DataBlock	access:public
DataBlock::padding	./data_format.h	/^  char padding[94];$/;"	m	language:C++	struct:DataBlock	access:public
DataBlock::records	./data_format.h	/^  Record records[100];$/;"	m	language:C++	struct:DataBlock	access:public
DataFile	./data_file.cc	/^DataFile::DataFile(const std::string& file_name) {$/;"	f	language:C++	class:DataFile	signature:(const std::string& file_name)
DataFile	./data_file.h	/^  DataFile(const std::string& file_name);$/;"	p	language:C++	class:DataFile	access:public	signature:(const std::string& file_name)
DataFile	./data_file.h	/^class DataFile {$/;"	c	language:C++
DataFile::AllocateFreeBlock	./data_file.cc	/^int DataFile::AllocateFreeBlock() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::AllocateFreeBlock	./data_file.h	/^  int AllocateFreeBlock();$/;"	p	language:C++	class:DataFile	access:public	signature:()
DataFile::Close	./data_file.cc	/^Status DataFile::Close() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::Close	./data_file.h	/^  Status Close();$/;"	p	language:C++	class:DataFile	access:public	signature:()
DataFile::CreateDataFile	./data_file.cc	/^Status DataFile::CreateDataFile() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::CreateDataFile	./data_file.h	/^  Status CreateDataFile();$/;"	p	language:C++	class:DataFile	access:private	signature:()
DataFile::DataFile	./data_file.cc	/^DataFile::DataFile(const std::string& file_name) {$/;"	f	language:C++	class:DataFile	signature:(const std::string& file_name)
DataFile::DataFile	./data_file.h	/^  DataFile(const std::string& file_name);$/;"	p	language:C++	class:DataFile	access:public	signature:(const std::string& file_name)
DataFile::DeleteBlock	./data_file.cc	/^Status DataFile::DeleteBlock(int block_id) {$/;"	f	language:C++	class:DataFile	signature:(int block_id)
DataFile::DeleteBlock	./data_file.h	/^  Status DeleteBlock(int block_id);$/;"	p	language:C++	class:DataFile	access:public	signature:(int block_id)
DataFile::GetBlock	./data_file.cc	/^Status DataFile::GetBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
DataFile::GetBlock	./data_file.h	/^  Status GetBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:public	signature:(int block_id, DataBlock* block)
DataFile::Open	./data_file.cc	/^Status DataFile::Open() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::Open	./data_file.h	/^  Status Open();$/;"	p	language:C++	class:DataFile	access:public	signature:()
DataFile::OpenDataFile	./data_file.cc	/^Status DataFile::OpenDataFile() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::OpenDataFile	./data_file.h	/^  Status OpenDataFile();$/;"	p	language:C++	class:DataFile	access:private	signature:()
DataFile::PutBlock	./data_file.cc	/^Status DataFile::PutBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
DataFile::PutBlock	./data_file.h	/^  Status PutBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:public	signature:(int block_id, DataBlock* block)
DataFile::ReadBlock	./data_file.cc	/^Status DataFile::ReadBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
DataFile::ReadBlock	./data_file.h	/^  Status ReadBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:private	signature:(int block_id, DataBlock* block)
DataFile::Sync	./data_file.cc	/^Status DataFile::Sync() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::Sync	./data_file.h	/^  Status Sync();$/;"	p	language:C++	class:DataFile	access:public	signature:()
DataFile::WriteBlock	./data_file.cc	/^Status DataFile::WriteBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
DataFile::WriteBlock	./data_file.h	/^  Status WriteBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:private	signature:(int block_id, DataBlock* block)
DataFile::WriteSuperBlock	./data_file.cc	/^Status DataFile::WriteSuperBlock() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::WriteSuperBlock	./data_file.h	/^  Status WriteSuperBlock();$/;"	p	language:C++	class:DataFile	access:private	signature:()
DataFile::data_fd_	./data_file.h	/^  int data_fd_;$/;"	m	language:C++	class:DataFile	access:private
DataFile::data_file_	./data_file.h	/^  std::string data_file_;$/;"	m	language:C++	class:DataFile	access:private
DataFile::super_block_	./data_file.h	/^  SuperBlock super_block_;$/;"	m	language:C++	class:DataFile	access:private
DataFile::~DataFile	./data_file.cc	/^DataFile::~DataFile() {$/;"	f	language:C++	class:DataFile	signature:()
DataFile::~DataFile	./data_file.h	/^  ~DataFile();$/;"	p	language:C++	class:DataFile	access:public	signature:()
Db	./db.h	/^  Db() {}$/;"	f	language:C++	class:Db	access:public	signature:()
Db	./db.h	/^class Db {$/;"	c	language:C++
Db::Close	./db.h	/^  virtual Status Close();$/;"	p	language:C++	class:Db	access:public	signature:()
Db::Db	./db.h	/^  Db() {}$/;"	f	language:C++	class:Db	access:public	signature:()
Db::Delete	./db.h	/^  virtual Status Delete(const std::string& key) = 0;$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& key)
Db::Get	./db.h	/^  virtual Status Get(const std::string& key, std::string* value) const = 0;$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& key, std::string* value) const
Db::Open	./db.h	/^  virtual Status Open(const std::string& db_path);$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& db_path)
Db::Put	./db.h	/^  virtual Status Put(const std::string& key, const std::string& value) = 0;$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& key, const std::string& value)
Db::~Db	./db.h	/^  virtual ~Db() {};$/;"	f	language:C++	class:Db	access:public	signature:()
Delete	./block_db.cc	/^Status BlockDb::Delete(const std::string& key) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key)
Delete	./block_db.h	/^  virtual Status Delete(const std::string& key);$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& key)
Delete	./db.h	/^  virtual Status Delete(const std::string& key) = 0;$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& key)
DeleteBlock	./data_file.cc	/^Status DataFile::DeleteBlock(int block_id) {$/;"	f	language:C++	class:DataFile	signature:(int block_id)
DeleteBlock	./data_file.h	/^  Status DeleteBlock(int block_id);$/;"	p	language:C++	class:DataFile	access:public	signature:(int block_id)
DeleteIndex	./btree_index_file.cc	/^Status BTreeIndexFile::DeleteIndex(uint64_t key) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(uint64_t key)
DeleteIndex	./index_file.h	/^  Status DeleteIndex(uint64_t key);$/;"	p	language:C++	class:IndexFile	access:public	signature:(uint64_t key)
DeleteIndex	./map_index_file.cc	/^Status MapIndexFile::DeleteIndex(uint64_t key) {$/;"	f	language:C++	class:MapIndexFile	signature:(uint64_t key)
DeleteIndex	./map_index_file.h	/^  Status DeleteIndex(uint64_t key);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(uint64_t key)
ENGINE_DATA_FORMAT_H_	./data_format.h	13;"	d	language:C++
ENGINE_DB_H_	./db.h	13;"	d	language:C++
ENGINE_SLICE_H_	./slice.h	13;"	d	language:C++
ENGINE_STATUS_H_	./status.h	13;"	d	language:C++
ENGINE_UTIL_H_	./util.h	13;"	d	language:C++
Error	./status.h	/^  static Status Error(const std::string& msg) {$/;"	f	language:C++	class:Status	access:public	signature:(const std::string& msg)
FileHeader	./data_format.h	/^struct FileHeader {$/;"	s	language:C++
FileHeader::block_size	./data_format.h	/^  uint8_t block_size;$/;"	m	language:C++	struct:FileHeader	access:public
FileHeader::file_type	./data_format.h	/^  uint8_t file_type;$/;"	m	language:C++	struct:FileHeader	access:public
FileHeader::scn	./data_format.h	/^  uint64_t scn;$/;"	m	language:C++	struct:FileHeader	access:public
FileHeader::version	./data_format.h	/^  uint8_t version;$/;"	m	language:C++	struct:FileHeader	access:public
Get	./block_db.cc	/^Status BlockDb::Get(const std::string& key, std::string* value) const {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key, std::string* value) const
Get	./block_db.h	/^  virtual Status Get(const std::string& key, std::string* value) const;$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& key, std::string* value) const
Get	./db.h	/^  virtual Status Get(const std::string& key, std::string* value) const = 0;$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& key, std::string* value) const
GetBlock	./data_file.cc	/^Status DataFile::GetBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
GetBlock	./data_file.h	/^  Status GetBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:public	signature:(int block_id, DataBlock* block)
GetIndex	./btree_index_file.cc	/^Status BTreeIndexFile::GetIndex(uint64_t key, IndexRecord* index) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(uint64_t key, IndexRecord* index)
GetIndex	./index_file.h	/^  Status GetIndex(uint64_t key, IndexRecord* index);$/;"	p	language:C++	class:IndexFile	access:public	signature:(uint64_t key, IndexRecord* index)
GetIndex	./map_index_file.cc	/^Status MapIndexFile::GetIndex(uint64_t key, IndexRecord* index) {$/;"	f	language:C++	class:MapIndexFile	signature:(uint64_t key, IndexRecord* index)
GetIndex	./map_index_file.h	/^  Status GetIndex(uint64_t key, IndexRecord* index);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(uint64_t key, IndexRecord* index)
IndexFile	./index_file.h	/^  IndexFile(const std::string& file_name);$/;"	p	language:C++	class:IndexFile	access:public	signature:(const std::string& file_name)
IndexFile	./index_file.h	/^class IndexFile {$/;"	c	language:C++
IndexFile::Close	./index_file.h	/^  Status Close();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
IndexFile::DeleteIndex	./index_file.h	/^  Status DeleteIndex(uint64_t key);$/;"	p	language:C++	class:IndexFile	access:public	signature:(uint64_t key)
IndexFile::GetIndex	./index_file.h	/^  Status GetIndex(uint64_t key, IndexRecord* index);$/;"	p	language:C++	class:IndexFile	access:public	signature:(uint64_t key, IndexRecord* index)
IndexFile::IndexFile	./index_file.h	/^  IndexFile(const std::string& file_name);$/;"	p	language:C++	class:IndexFile	access:public	signature:(const std::string& file_name)
IndexFile::Open	./index_file.h	/^  Status Open();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
IndexFile::PutIndex	./index_file.h	/^  Status PutIndex(const IndexRecord& index);$/;"	p	language:C++	class:IndexFile	access:public	signature:(const IndexRecord& index)
IndexFile::Sync	./index_file.h	/^  Status Sync();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
IndexFile::index_file_	./index_file.h	/^  std::string index_file_;$/;"	m	language:C++	class:IndexFile	access:protected
IndexFile::~IndexFile	./index_file.h	/^  ~IndexFile();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
IndexRecord	./data_format.h	/^struct IndexRecord {$/;"	s	language:C++
IndexRecord::block_id	./data_format.h	/^  uint64_t block_id;$/;"	m	language:C++	struct:IndexRecord	access:public
IndexRecord::key	./data_format.h	/^  uint64_t key;$/;"	m	language:C++	struct:IndexRecord	access:public
Insert	./block_db.cc	/^Status BlockDb::Insert(const std::string& key, const std::string& value) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key, const std::string& value)
Insert	./block_db.h	/^  Status Insert(const std::string& key, const std::string& value);$/;"	p	language:C++	class:BlockDb	access:private	signature:(const std::string& key, const std::string& value)
IsEmpty	./slice.h	/^  bool IsEmpty() const { return size_ == 0; }$/;"	f	language:C++	class:Slice	access:public	signature:() const
IsNotFound	./status.h	/^  bool IsNotFound() const {return (kNotFound == code_) ? true : false;};$/;"	f	language:C++	class:Status	access:public	signature:() const
MapIndexFile	./map_index_file.cc	/^MapIndexFile::MapIndexFile(const std::string& file_name) :$/;"	f	language:C++	class:MapIndexFile	signature:(const std::string& file_name)
MapIndexFile	./map_index_file.h	/^  MapIndexFile(const std::string& file_name);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(const std::string& file_name)
MapIndexFile	./map_index_file.h	/^class MapIndexFile {$/;"	c	language:C++
MapIndexFile::Close	./map_index_file.cc	/^Status MapIndexFile::Close() {$/;"	f	language:C++	class:MapIndexFile	signature:()
MapIndexFile::Close	./map_index_file.h	/^  Status Close();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
MapIndexFile::CreateIndexFile	./map_index_file.cc	/^Status MapIndexFile::CreateIndexFile() {$/;"	f	language:C++	class:MapIndexFile	signature:()
MapIndexFile::CreateIndexFile	./map_index_file.h	/^  Status CreateIndexFile();$/;"	p	language:C++	class:MapIndexFile	access:private	signature:()
MapIndexFile::DeleteIndex	./map_index_file.cc	/^Status MapIndexFile::DeleteIndex(uint64_t key) {$/;"	f	language:C++	class:MapIndexFile	signature:(uint64_t key)
MapIndexFile::DeleteIndex	./map_index_file.h	/^  Status DeleteIndex(uint64_t key);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(uint64_t key)
MapIndexFile::GetIndex	./map_index_file.cc	/^Status MapIndexFile::GetIndex(uint64_t key, IndexRecord* index) {$/;"	f	language:C++	class:MapIndexFile	signature:(uint64_t key, IndexRecord* index)
MapIndexFile::GetIndex	./map_index_file.h	/^  Status GetIndex(uint64_t key, IndexRecord* index);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(uint64_t key, IndexRecord* index)
MapIndexFile::MapIndexFile	./map_index_file.cc	/^MapIndexFile::MapIndexFile(const std::string& file_name) :$/;"	f	language:C++	class:MapIndexFile	signature:(const std::string& file_name)
MapIndexFile::MapIndexFile	./map_index_file.h	/^  MapIndexFile(const std::string& file_name);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(const std::string& file_name)
MapIndexFile::Open	./map_index_file.cc	/^Status MapIndexFile::Open() {$/;"	f	language:C++	class:MapIndexFile	signature:()
MapIndexFile::Open	./map_index_file.h	/^  Status Open();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
MapIndexFile::OpenIndexFile	./map_index_file.cc	/^Status MapIndexFile::OpenIndexFile() {$/;"	f	language:C++	class:MapIndexFile	signature:()
MapIndexFile::OpenIndexFile	./map_index_file.h	/^  Status OpenIndexFile();$/;"	p	language:C++	class:MapIndexFile	access:private	signature:()
MapIndexFile::PutIndex	./map_index_file.cc	/^Status MapIndexFile::PutIndex(const IndexRecord& index) {$/;"	f	language:C++	class:MapIndexFile	signature:(const IndexRecord& index)
MapIndexFile::PutIndex	./map_index_file.h	/^  Status PutIndex(const IndexRecord& index);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(const IndexRecord& index)
MapIndexFile::Sync	./map_index_file.cc	/^Status MapIndexFile::Sync() {$/;"	f	language:C++	class:MapIndexFile	signature:()
MapIndexFile::Sync	./map_index_file.h	/^  Status Sync();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
MapIndexFile::index_	./map_index_file.h	/^  std::map<uint64_t, uint64_t> index_;$/;"	m	language:C++	class:MapIndexFile	access:private
MapIndexFile::index_fd_	./map_index_file.h	/^  int index_fd_;$/;"	m	language:C++	class:MapIndexFile	access:private
MapIndexFile::~MapIndexFile	./map_index_file.cc	/^MapIndexFile::~MapIndexFile() {$/;"	f	language:C++	class:MapIndexFile	signature:()
MapIndexFile::~MapIndexFile	./map_index_file.h	/^  ~MapIndexFile();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
NotFound	./status.h	/^  static Status NotFound(const std::string& msg) {$/;"	f	language:C++	class:Status	access:public	signature:(const std::string& msg)
OK	./status.h	/^  static Status OK() { return Status(); }$/;"	f	language:C++	class:Status	access:public	signature:()
Ok	./status.h	/^  bool Ok() const { return (kOk == code_) ? true : false; }$/;"	f	language:C++	class:Status	access:public	signature:() const
Open	./block_db.cc	/^Status BlockDb::Open(const std::string& db_path) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& db_path)
Open	./block_db.h	/^  virtual Status Open(const std::string& db_path);$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& db_path)
Open	./btree_index_file.cc	/^Status BTreeIndexFile::Open() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
Open	./data_file.cc	/^Status DataFile::Open() {$/;"	f	language:C++	class:DataFile	signature:()
Open	./data_file.h	/^  Status Open();$/;"	p	language:C++	class:DataFile	access:public	signature:()
Open	./db.h	/^  virtual Status Open(const std::string& db_path);$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& db_path)
Open	./index_file.h	/^  Status Open();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
Open	./map_index_file.cc	/^Status MapIndexFile::Open() {$/;"	f	language:C++	class:MapIndexFile	signature:()
Open	./map_index_file.h	/^  Status Open();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
OpenBtree	./btree_index_file.cc	/^Status BTreeIndexFile::OpenBtree() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
OpenBtree	./btree_index_file.h	/^  Status OpenBtree();$/;"	p	language:C++	class:BTreeIndexFile	access:private	signature:()
OpenDataFile	./data_file.cc	/^Status DataFile::OpenDataFile() {$/;"	f	language:C++	class:DataFile	signature:()
OpenDataFile	./data_file.h	/^  Status OpenDataFile();$/;"	p	language:C++	class:DataFile	access:private	signature:()
OpenIndexFile	./map_index_file.cc	/^Status MapIndexFile::OpenIndexFile() {$/;"	f	language:C++	class:MapIndexFile	signature:()
OpenIndexFile	./map_index_file.h	/^  Status OpenIndexFile();$/;"	p	language:C++	class:MapIndexFile	access:private	signature:()
Put	./block_db.cc	/^Status BlockDb::Put(const std::string& key, const std::string& value) {$/;"	f	language:C++	class:BlockDb	signature:(const std::string& key, const std::string& value)
Put	./block_db.h	/^  virtual Status Put(const std::string& key, const std::string& value);$/;"	p	language:C++	class:BlockDb	access:public	signature:(const std::string& key, const std::string& value)
Put	./db.h	/^  virtual Status Put(const std::string& key, const std::string& value) = 0;$/;"	p	language:C++	class:Db	access:public	signature:(const std::string& key, const std::string& value)
PutBlock	./data_file.cc	/^Status DataFile::PutBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
PutBlock	./data_file.h	/^  Status PutBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:public	signature:(int block_id, DataBlock* block)
PutIndex	./btree_index_file.cc	/^Status BTreeIndexFile::PutIndex(const IndexRecord& index) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(const IndexRecord& index)
PutIndex	./index_file.h	/^  Status PutIndex(const IndexRecord& index);$/;"	p	language:C++	class:IndexFile	access:public	signature:(const IndexRecord& index)
PutIndex	./map_index_file.cc	/^Status MapIndexFile::PutIndex(const IndexRecord& index) {$/;"	f	language:C++	class:MapIndexFile	signature:(const IndexRecord& index)
PutIndex	./map_index_file.h	/^  Status PutIndex(const IndexRecord& index);$/;"	p	language:C++	class:MapIndexFile	access:public	signature:(const IndexRecord& index)
ReadBlock	./data_file.cc	/^Status DataFile::ReadBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
ReadBlock	./data_file.h	/^  Status ReadBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:private	signature:(int block_id, DataBlock* block)
ReadBtreeInfo	./btree_index_file.cc	/^Status BTreeIndexFile::ReadBtreeInfo(int index_fd, int mode) {$/;"	f	language:C++	class:BTreeIndexFile	signature:(int index_fd, int mode)
ReadBtreeInfo	./btree_index_file.h	/^  Status ReadBtreeInfo(int index_fd, int mode);$/;"	p	language:C++	class:BTreeIndexFile	access:private	signature:(int index_fd, int mode)
Record	./data_format.h	/^struct Record {$/;"	s	language:C++
Record::data	./data_format.h	/^  char data[92];$/;"	m	language:C++	struct:Record	access:public
Record::key	./data_format.h	/^  uint64_t key;$/;"	m	language:C++	struct:Record	access:public
Slice	./slice.h	/^  Slice() : data_(""), size_(0) {}$/;"	f	language:C++	class:Slice	access:public	signature:()
Slice	./slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) {}$/;"	f	language:C++	class:Slice	access:public	signature:(const char* d, size_t n)
Slice	./slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) {}$/;"	f	language:C++	class:Slice	access:public	signature:(const char* s)
Slice	./slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) {}$/;"	f	language:C++	class:Slice	access:public	signature:(const std::string& s)
Slice	./slice.h	/^class Slice {$/;"	c	language:C++
Slice::Clear	./slice.h	/^  void Clear() { data_ = ""; size_ = 0; }$/;"	f	language:C++	class:Slice	access:public	signature:()
Slice::IsEmpty	./slice.h	/^  bool IsEmpty() const { return size_ == 0; }$/;"	f	language:C++	class:Slice	access:public	signature:() const
Slice::Slice	./slice.h	/^  Slice() : data_(""), size_(0) {}$/;"	f	language:C++	class:Slice	access:public	signature:()
Slice::Slice	./slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) {}$/;"	f	language:C++	class:Slice	access:public	signature:(const char* d, size_t n)
Slice::Slice	./slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) {}$/;"	f	language:C++	class:Slice	access:public	signature:(const char* s)
Slice::Slice	./slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) {}$/;"	f	language:C++	class:Slice	access:public	signature:(const std::string& s)
Slice::ToString	./slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	language:C++	class:Slice	access:public	signature:() const
Slice::data	./slice.h	/^  const char* data() const { return data_ };$/;"	f	language:C++	class:Slice	access:public	signature:() const
Slice::data_	./slice.h	/^  const char* data_;$/;"	m	language:C++	class:Slice	access:private
Slice::oerator	./slice.h	/^  char oerator[](size_t n) const {$/;"	f	language:C++	class:Slice	access:public	signature:(size_t n) const
Slice::size	./slice.h	/^  size_t size() const { return size_; }$/;"	f	language:C++	class:Slice	access:public	signature:() const
Slice::size_	./slice.h	/^  size_t size_;$/;"	m	language:C++	class:Slice	access:private
Slice::~Slice	./slice.h	/^  ~Slice() { data_ = ""; size_ = 0; }$/;"	f	language:C++	class:Slice	access:public	signature:()
Status	./status.h	/^  Status() : code_(kOk) {}$/;"	f	language:C++	class:Status	access:public	signature:()
Status	./status.h	/^  Status(Code code, const std::string& msg) : code_(code), message_(msg) {}$/;"	f	language:C++	class:Status	access:private	signature:(Code code, const std::string& msg)
Status	./status.h	/^  Status(const Status &status);$/;"	p	language:C++	class:Status	access:public	signature:(const Status &status)
Status	./status.h	/^class Status$/;"	c	language:C++
Status	./status.h	/^inline Status::Status(const Status &status) {$/;"	f	language:C++	class:Status	signature:(const Status &status)
Status::Code	./status.h	/^  enum Code {$/;"	g	language:C++	class:Status	access:private
Status::Error	./status.h	/^  static Status Error(const std::string& msg) {$/;"	f	language:C++	class:Status	access:public	signature:(const std::string& msg)
Status::IsNotFound	./status.h	/^  bool IsNotFound() const {return (kNotFound == code_) ? true : false;};$/;"	f	language:C++	class:Status	access:public	signature:() const
Status::NotFound	./status.h	/^  static Status NotFound(const std::string& msg) {$/;"	f	language:C++	class:Status	access:public	signature:(const std::string& msg)
Status::OK	./status.h	/^  static Status OK() { return Status(); }$/;"	f	language:C++	class:Status	access:public	signature:()
Status::Ok	./status.h	/^  bool Ok() const { return (kOk == code_) ? true : false; }$/;"	f	language:C++	class:Status	access:public	signature:() const
Status::Status	./status.h	/^  Status() : code_(kOk) {}$/;"	f	language:C++	class:Status	access:public	signature:()
Status::Status	./status.h	/^  Status(Code code, const std::string& msg) : code_(code), message_(msg) {}$/;"	f	language:C++	class:Status	access:private	signature:(Code code, const std::string& msg)
Status::Status	./status.h	/^  Status(const Status &status);$/;"	p	language:C++	class:Status	access:public	signature:(const Status &status)
Status::Status	./status.h	/^inline Status::Status(const Status &status) {$/;"	f	language:C++	class:Status	signature:(const Status &status)
Status::ToString	./status.h	/^  std::string ToString() const;$/;"	p	language:C++	class:Status	access:public	signature:() const
Status::ToString	./status.h	/^inline std::string Status::ToString() const {$/;"	f	language:C++	class:Status	signature:() const
Status::code_	./status.h	/^  Code code_;$/;"	m	language:C++	class:Status	access:private
Status::code_messages_	./status.h	/^  static const char* code_messages_[];$/;"	m	language:C++	class:Status	access:private
Status::code_messages_	./status.h	/^const char* Status::code_messages_[] = {$/;"	m	language:C++	class:Status
Status::kError	./status.h	/^    kError = 1,$/;"	e	language:C++	enum:Status::Code
Status::kNotFound	./status.h	/^    kNotFound = 2$/;"	e	language:C++	enum:Status::Code
Status::kOk	./status.h	/^    kOk = 0,$/;"	e	language:C++	enum:Status::Code
Status::message_	./status.h	/^  std::string message_;$/;"	m	language:C++	class:Status	access:private
Status::operator =	./status.h	/^  Status& operator=(const Status &status);$/;"	p	language:C++	class:Status	access:public	signature:(const Status &status)
Status::operator =	./status.h	/^inline Status&  Status::operator=(const Status &status) {$/;"	f	language:C++	class:Status	signature:(const Status &status)
Status::~Status	./status.h	/^  ~Status() {}$/;"	f	language:C++	class:Status	access:public	signature:()
SuperBlock	./data_format.h	/^struct SuperBlock {$/;"	s	language:C++
SuperBlock::block_nr	./data_format.h	/^  uint32_t block_nr;$/;"	m	language:C++	struct:SuperBlock	access:public
SuperBlock::header	./data_format.h	/^  FileHeader header;$/;"	m	language:C++	struct:SuperBlock	access:public
SuperBlock::index_nr	./data_format.h	/^  uint32_t index_nr;$/;"	m	language:C++	struct:SuperBlock	access:public
SuperBlock::indices	./data_format.h	/^  uint32_t indices[1018]; \/\/ make it a 4KB block$/;"	m	language:C++	struct:SuperBlock	access:public
Sync	./btree_index_file.cc	/^Status BTreeIndexFile::Sync() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
Sync	./data_file.cc	/^Status DataFile::Sync() {$/;"	f	language:C++	class:DataFile	signature:()
Sync	./data_file.h	/^  Status Sync();$/;"	p	language:C++	class:DataFile	access:public	signature:()
Sync	./index_file.h	/^  Status Sync();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
Sync	./map_index_file.cc	/^Status MapIndexFile::Sync() {$/;"	f	language:C++	class:MapIndexFile	signature:()
Sync	./map_index_file.h	/^  Status Sync();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
ToString	./slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	language:C++	class:Slice	access:public	signature:() const
ToString	./status.h	/^  std::string ToString() const;$/;"	p	language:C++	class:Status	access:public	signature:() const
ToString	./status.h	/^inline std::string Status::ToString() const {$/;"	f	language:C++	class:Status	signature:() const
Update	./block_db.cc	/^Status BlockDb::Update(uint64_t offset, const std::string& key,$/;"	f	language:C++	class:BlockDb	signature:(uint64_t offset, const std::string& key, const std::string &value)
Update	./block_db.h	/^  Status Update(uint64_t offset, const std::string& key, std::string& value);$/;"	p	language:C++	class:BlockDb	access:private	signature:(uint64_t offset, const std::string& key, std::string& value)
WriteBlock	./data_file.cc	/^Status DataFile::WriteBlock(int block_id, DataBlock* block) {$/;"	f	language:C++	class:DataFile	signature:(int block_id, DataBlock* block)
WriteBlock	./data_file.h	/^  Status WriteBlock(int block_id, DataBlock* block);$/;"	p	language:C++	class:DataFile	access:private	signature:(int block_id, DataBlock* block)
WriteSuperBlock	./data_file.cc	/^Status DataFile::WriteSuperBlock() {$/;"	f	language:C++	class:DataFile	signature:()
WriteSuperBlock	./data_file.h	/^  Status WriteSuperBlock();$/;"	p	language:C++	class:DataFile	access:private	signature:()
block_id	./data_format.h	/^  uint64_t block_id;$/;"	m	language:C++	struct:IndexRecord	access:public
block_nr	./data_format.h	/^  uint32_t block_nr;$/;"	m	language:C++	struct:SuperBlock	access:public
block_size	./data_format.h	/^  uint8_t block_size;$/;"	m	language:C++	struct:FileHeader	access:public
btree_	./btree_index_file.h	/^  struct stp_btree_info* btree_;$/;"	m	language:C++	class:BTreeIndexFile	typeref:struct:BTreeIndexFile::stp_btree_info	access:private
code_	./status.h	/^  Code code_;$/;"	m	language:C++	class:Status	access:private
code_messages_	./status.h	/^  static const char* code_messages_[];$/;"	m	language:C++	class:Status	access:private
code_messages_	./status.h	/^const char* Status::code_messages_[] = {$/;"	m	language:C++	class:Status
conv	./util.h	/^const D conv(const S& s) {$/;"	f	language:C++	namespace:util	signature:(const S& s)
data	./data_format.h	/^  char data[92];$/;"	m	language:C++	struct:Record	access:public
data	./slice.h	/^  const char* data() const { return data_ };$/;"	f	language:C++	class:Slice	access:public	signature:() const
data_	./slice.h	/^  const char* data_;$/;"	m	language:C++	class:Slice	access:private
data_fd_	./data_file.h	/^  int data_fd_;$/;"	m	language:C++	class:DataFile	access:private
data_file_	./block_db.h	/^  DataFile* data_file_;$/;"	m	language:C++	class:BlockDb	access:private
data_file_	./data_file.h	/^  std::string data_file_;$/;"	m	language:C++	class:DataFile	access:private
db_path_	./block_db.h	/^  std::string db_path_;$/;"	m	language:C++	class:BlockDb	access:private
do_btree_super_insert	./btree_index_file.cc	/^int do_btree_super_insert(struct stp_btree_info *sb, $/;"	p	language:C++	file:	signature:(struct stp_btree_info *sb, const struct stp_bnode_off *off, u8 flags)
do_btree_super_rm	./btree_index_file.cc	/^int do_btree_super_rm(struct stp_btree_info *sb, u64 ino);$/;"	p	language:C++	file:	signature:(struct stp_btree_info *sb, u64 ino)
do_btree_super_search	./btree_index_file.cc	/^int do_btree_super_search(struct stp_btree_info *sb,$/;"	p	language:C++	file:	signature:(struct stp_btree_info *sb, u64 ino, struct stp_bnode_off *off)
file_type	./data_format.h	/^  uint8_t file_type;$/;"	m	language:C++	struct:FileHeader	access:public
header	./data_format.h	/^  FileHeader header;$/;"	m	language:C++	struct:SuperBlock	access:public
index_	./map_index_file.h	/^  std::map<uint64_t, uint64_t> index_;$/;"	m	language:C++	class:MapIndexFile	access:private
index_fd_	./map_index_file.h	/^  int index_fd_;$/;"	m	language:C++	class:MapIndexFile	access:private
index_file_	./block_db.h	/^  IndexFile* index_file_;$/;"	m	language:C++	class:BlockDb	access:private
index_file_	./index_file.h	/^  std::string index_file_;$/;"	m	language:C++	class:IndexFile	access:protected
index_nr	./data_format.h	/^  uint32_t index_nr;$/;"	m	language:C++	struct:SuperBlock	access:public
indices	./data_format.h	/^  uint32_t indices[1018]; \/\/ make it a 4KB block$/;"	m	language:C++	struct:SuperBlock	access:public
items	./data_format.h	/^  uint16_t items;$/;"	m	language:C++	struct:DataBlock	access:public
kError	./status.h	/^    kError = 1,$/;"	e	language:C++	enum:Status::Code
kNotFound	./status.h	/^    kNotFound = 2$/;"	e	language:C++	enum:Status::Code
kOk	./status.h	/^    kOk = 0,$/;"	e	language:C++	enum:Status::Code
key	./data_format.h	/^  uint64_t key;$/;"	m	language:C++	struct:IndexRecord	access:public
key	./data_format.h	/^  uint64_t key;$/;"	m	language:C++	struct:Record	access:public
message_	./status.h	/^  std::string message_;$/;"	m	language:C++	class:Status	access:private
oerator	./slice.h	/^  char oerator[](size_t n) const {$/;"	f	language:C++	class:Slice	access:public	signature:(size_t n) const
operator !=	./slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) const {$/;"	f	language:C++	signature:(const Slice& x, const Slice& y) const
operator =	./status.h	/^  Status& operator=(const Status &status);$/;"	p	language:C++	class:Status	access:public	signature:(const Status &status)
operator =	./status.h	/^inline Status&  Status::operator=(const Status &status) {$/;"	f	language:C++	class:Status	signature:(const Status &status)
operator ==	./slice.h	/^inline bool operator==(const Slice& x, const Slice& y) const {$/;"	f	language:C++	signature:(const Slice& x, const Slice& y) const
padding	./data_format.h	/^  char padding[94];$/;"	m	language:C++	struct:DataBlock	access:public
records	./data_format.h	/^  Record records[100];$/;"	m	language:C++	struct:DataBlock	access:public
scn	./data_format.h	/^  uint64_t scn;$/;"	m	language:C++	struct:FileHeader	access:public
size	./slice.h	/^  size_t size() const { return size_; }$/;"	f	language:C++	class:Slice	access:public	signature:() const
size_	./slice.h	/^  size_t size_;$/;"	m	language:C++	class:Slice	access:private
super_block_	./data_file.h	/^  SuperBlock super_block_;$/;"	m	language:C++	class:DataFile	access:private
util	./util.h	/^namespace util$/;"	n	language:C++
util::conv	./util.h	/^const D conv(const S& s) {$/;"	f	language:C++	namespace:util	signature:(const S& s)
version	./data_format.h	/^  uint8_t version;$/;"	m	language:C++	struct:FileHeader	access:public
~BTreeIndexFile	./btree_index_file.cc	/^BTreeIndexFile::~BTreeIndexFile() {$/;"	f	language:C++	class:BTreeIndexFile	signature:()
~BTreeIndexFile	./btree_index_file.h	/^  ~BTreeIndexFile();$/;"	p	language:C++	class:BTreeIndexFile	access:public	signature:()
~BlockDb	./block_db.h	/^  ~BlockDb();$/;"	p	language:C++	class:BlockDb	access:public	signature:()
~DataFile	./data_file.cc	/^DataFile::~DataFile() {$/;"	f	language:C++	class:DataFile	signature:()
~DataFile	./data_file.h	/^  ~DataFile();$/;"	p	language:C++	class:DataFile	access:public	signature:()
~Db	./db.h	/^  virtual ~Db() {};$/;"	f	language:C++	class:Db	access:public	signature:()
~IndexFile	./index_file.h	/^  ~IndexFile();$/;"	p	language:C++	class:IndexFile	access:public	signature:()
~MapIndexFile	./map_index_file.cc	/^MapIndexFile::~MapIndexFile() {$/;"	f	language:C++	class:MapIndexFile	signature:()
~MapIndexFile	./map_index_file.h	/^  ~MapIndexFile();$/;"	p	language:C++	class:MapIndexFile	access:public	signature:()
~Slice	./slice.h	/^  ~Slice() { data_ = ""; size_ = 0; }$/;"	f	language:C++	class:Slice	access:public	signature:()
~Status	./status.h	/^  ~Status() {}$/;"	f	language:C++	class:Status	access:public	signature:()
